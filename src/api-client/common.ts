/* tslint:disable */
/**
 * Firecrawl API
 * API for interacting with Firecrawl services to perform web scraping and crawling tasks.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@firecrawl.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration.js';
import type { RequestArgs } from './base.js';
import type { AxiosInstance, AxiosResponse } from 'axios';
import { RequiredError } from './base.js';

/**
 * @internal
 */
export const DUMMY_BASE_URL = 'https://example.com';

/**
 * Asserts that a parameter exists and is not null or undefined.
 *
 * @param functionName The name of the function being called.
 * @param paramName The name of the parameter being checked.
 * @param paramValue The value of the parameter.
 * @throws {RequiredError} If the parameter value is null or undefined.
 */
export const assertParamExists = function (
  functionName: string,
  paramName: string,
  paramValue: unknown,
) {
  if (paramValue === null || paramValue === undefined) {
    throw new RequiredError(
      paramName,
      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,
    );
  }
};

/**
 * Sets an API key on the provided object.
 *
 * @param object The object to set the API key on.
 * @param keyParamName The name of the key parameter.
 * @param configuration An optional configuration object.
 */
export const setApiKeyToObject = async function (
  object: any,
  keyParamName: string,
  configuration?: Configuration,
) {
  if (configuration && configuration.apiKey) {
    const localVarApiKeyValue =
      typeof configuration.apiKey === 'function'
        ? await configuration.apiKey(keyParamName)
        : await configuration.apiKey;
    object[keyParamName] = localVarApiKeyValue;
  }
};

/**
 * Sets basic authentication credentials on the provided object.
 *
 * @param object The object to set the basic auth on.
 * @param configuration An optional configuration object.
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
  if (configuration && (configuration.username || configuration.password)) {
    object['auth'] = {
      username: configuration.username,
      password: configuration.password,
    };
  }
};

/**
 * Sets bearer token authentication on the provided object.
 *
 * @param object The object to set the bearer auth on.
 * @param configuration An optional configuration object.
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
  if (configuration && configuration.accessToken) {
    const accessToken =
      typeof configuration.accessToken === 'function'
        ? await configuration.accessToken()
        : await configuration.accessToken;
    object['Authorization'] = 'Bearer ' + accessToken;
  }
};

/**
 * Sets OAuth2 authentication on the provided object.
 *
 * @param object The object to set the OAuth on.
 * @param name The name of the OAuth.
 * @param scopes The scopes of the OAuth.
 * @param configuration An optional configuration object.
 */
export const setOAuthToObject = async function (
  object: any,
  name: string,
  scopes: string[],
  configuration?: Configuration,
) {
  if (configuration && configuration.accessToken) {
    const localVarAccessTokenValue =
      typeof configuration.accessToken === 'function'
        ? await configuration.accessToken(name, scopes)
        : await configuration.accessToken;
    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;
  }
};

/**
 * Recursively flattens an object into URL search parameters.
 * This function is used internally to handle complex query parameters.
 *
 * @internal
 * @param urlSearchParams The URLSearchParams object to append parameters to.
 * @param parameter The parameter to flatten.
 * @param key The current key prefix for nested parameters.
 */
function setFlattenedQueryParams(
  urlSearchParams: URLSearchParams,
  parameter: any,
  key: string = '',
): void {
  if (parameter == null) return;
  if (typeof parameter === 'object') {
    if (Array.isArray(parameter)) {
      (parameter as any[]).forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));
    } else {
      Object.keys(parameter).forEach((currentKey) =>
        setFlattenedQueryParams(
          urlSearchParams,
          parameter[currentKey],
          `${key}${key !== '' ? '.' : ''}${currentKey}`,
        ),
      );
    }
  } else {
    if (urlSearchParams.has(key)) {
      urlSearchParams.append(key, parameter);
    } else {
      urlSearchParams.set(key, parameter);
    }
  }
}

/**
 * Sets search parameters on a given URL.
 *
 * @param url The URL to set the search params on.
 * @param objects The objects to serialize as search params.
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
  const searchParams = new URLSearchParams(url.search);
  setFlattenedQueryParams(searchParams, objects);
  url.search = searchParams.toString();
};

/**
 * Serializes data if needed based on content type and configuration.
 *
 * @param value The value to serialize.
 * @param requestOptions The request options.
 * @param configuration An optional configuration object.
 */
export const serializeDataIfNeeded = function (
  value: any,
  requestOptions: any,
  configuration?: Configuration,
) {
  const nonString = typeof value !== 'string';
  const needsSerialization =
    nonString && configuration && configuration.isJsonMime
      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
      : nonString;
  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';
};

/**
 * Converts a URL object to a path string (pathname + search + hash).
 *
 * @param url The URL to convert to a path string.
 */
export const toPathString = function (url: URL) {
  return url.pathname + url.search + url.hash;
};

/**
 * Creates a request function for Axios.
 *
 * @param axiosArgs The Axios arguments.
 * @param globalAxios The global Axios instance.
 * @param BASE_PATH The base path.
 * @param configuration An optional configuration object.
 */
export const createRequestFunction = function (
  axiosArgs: RequestArgs,
  globalAxios: AxiosInstance,
  BASE_PATH: string,
  configuration?: Configuration,
) {
  return <T = unknown, R = AxiosResponse<T>>(
    axios: AxiosInstance = globalAxios,
    basePath: string = BASE_PATH,
  ) => {
    const axiosRequestArgs = {
      ...axiosArgs.options,
      url: (axios.defaults.baseURL ? '' : (configuration?.basePath ?? basePath)) + axiosArgs.url,
    };
    return axios.request<T, R>(axiosRequestArgs);
  };
};
